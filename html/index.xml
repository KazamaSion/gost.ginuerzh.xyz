<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GOST</title>
    <link>https://docs.ginuerzh.xyz/gost/</link>
    <description>Recent content on GOST</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 15 Nov 2017 16:50:24 +0800</lastBuildDate>
    
	<atom:link href="https://docs.ginuerzh.xyz/gost/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>快速开始</title>
      <link>https://docs.ginuerzh.xyz/gost/getting-started/</link>
      <pubDate>Wed, 15 Nov 2017 16:50:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/getting-started/</guid>
      <description>代理节点 在GOST中，GOST与其他代理服务都被看作是代理节点，GOST可以自己处理请求，或者将请求转发给任意一个或多个代理节点。 启动运行 开</description>
    </item>
    
    <item>
      <title>节点配置</title>
      <link>https://docs.ginuerzh.xyz/gost/configuration/</link>
      <pubDate>Thu, 16 Nov 2017 16:50:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/configuration/</guid>
      <description>逻辑分层 在GOST中一个代理服务逻辑上被分成两层：协议层(Protocol)和传输层(Transport)，每层有若干可选的类型，两层之间相</description>
    </item>
    
    <item>
      <title>HTTP(S)</title>
      <link>https://docs.ginuerzh.xyz/gost/http/</link>
      <pubDate>Fri, 17 Nov 2017 10:50:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/http/</guid>
      <description>HTTP是GOST支持的一种协议类型(Protocol)，配合各种传输类型(Transport)可以很灵活的构建代理服务： 标准HTTP代理服</description>
    </item>
    
    <item>
      <title>HTTP2</title>
      <link>https://docs.ginuerzh.xyz/gost/http2/</link>
      <pubDate>Fri, 17 Nov 2017 15:11:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/http2/</guid>
      <description>在GOST中HTTP2有两种模式：代理模式和隧道模式。 代理模式 在代理模式中，HTTP2被用作协议类型，传输类型必须为空。 gost -L http2://:443 443端口就是</description>
    </item>
    
    <item>
      <title>探测防御</title>
      <link>https://docs.ginuerzh.xyz/gost/probe_resist/</link>
      <pubDate>Sat, 05 Jan 2019 14:36:00 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/probe_resist/</guid>
      <description>GOST在2.7版本中增加了对HTTP/HTTPS/HTTP2代理的探测防御功能。当代理服务收到非法请求时，会按照探测防御策略返回对应的响</description>
    </item>
    
    <item>
      <title>SOCKS</title>
      <link>https://docs.ginuerzh.xyz/gost/socks/</link>
      <pubDate>Fri, 17 Nov 2017 11:10:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/socks/</guid>
      <description>SOCKS是GOST支持的协议类型(Protocol)，SOCKS协议有三个版本: SOCKS4, SOCKS4A和SOCKS5。 SOCKS4 gost -L socks4://:1080 标准的SOCKS4</description>
    </item>
    
    <item>
      <title>Shadowsocks</title>
      <link>https://docs.ginuerzh.xyz/gost/ss/</link>
      <pubDate>Fri, 17 Nov 2017 11:16:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/ss/</guid>
      <description>Shadowsocks是GOST支持的一种协议类型(Protocol)。 GOST对shadowsocks的支持是基于shadowsocks/</description>
    </item>
    
    <item>
      <title>SNI</title>
      <link>https://docs.ginuerzh.xyz/gost/sni/</link>
      <pubDate>Fri, 17 Nov 2017 11:30:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/sni/</guid>
      <description>SNI是GOST支持的一种协议类型(Protocol)。 服务端: gost -L sni://:443 客户端: 可以通过配置hosts直接使用，或使用GOST进行转发: gost -L :8080</description>
    </item>
    
    <item>
      <title>TLS</title>
      <link>https://docs.ginuerzh.xyz/gost/tls/</link>
      <pubDate>Fri, 17 Nov 2017 11:45:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/tls/</guid>
      <description>TLS是GOST支持的一种传输类型(Transport)。 服务端: gost -L tls://:443 客户端: gost -L :8080 -F tls://server_ip:443 GOST在TLS基础之上扩展出具有多路复用(Mul</description>
    </item>
    
    <item>
      <title>Websocket</title>
      <link>https://docs.ginuerzh.xyz/gost/ws/</link>
      <pubDate>Fri, 17 Nov 2017 12:00:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/ws/</guid>
      <description>Websocket是GOST支持的传输类型(Transport)。GOST中的Websocket有四种类型： Websocket gost -L ws://:8080 未加密的websocke</description>
    </item>
    
    <item>
      <title>KCP</title>
      <link>https://docs.ginuerzh.xyz/gost/kcp/</link>
      <pubDate>Fri, 17 Nov 2017 12:05:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/kcp/</guid>
      <description>KCP是GOST支持的一种传输类型(Transport)。 GOST对KCP的支持是基于xtaci/kcp-go和xtaci/kcptun库。</description>
    </item>
    
    <item>
      <title>QUIC</title>
      <link>https://docs.ginuerzh.xyz/gost/quic/</link>
      <pubDate>Fri, 17 Nov 2017 12:15:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/quic/</guid>
      <description>QUIC是GOST支持的一种传输类型(Transport)。GOST对QUIC的支持是基于lucas-clemente/quic-go库。 服</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>https://docs.ginuerzh.xyz/gost/ssh/</link>
      <pubDate>Fri, 17 Nov 2017 12:15:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/ssh/</guid>
      <description>SSH是GOST支持的一种传输类型(Transport)。 服务端: gost -L=ssh://:2222 客户端: gost -L=:8080 -F=ssh://server_ip:2222?ping=60 客户端可以通过ping参数设置心跳包发送周期，单位为秒。</description>
    </item>
    
    <item>
      <title>Simple-obfs</title>
      <link>https://docs.ginuerzh.xyz/gost/simple-obfs/</link>
      <pubDate>Fri, 17 Nov 2017 15:30:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/simple-obfs/</guid>
      <description>Simple-obfs是GOST支持的一种传输类型(Transport)。Simple-obfs兼容shadowsocks/simple-o</description>
    </item>
    
    <item>
      <title>Obfs4</title>
      <link>https://docs.ginuerzh.xyz/gost/obfs4/</link>
      <pubDate>Fri, 17 Nov 2017 15:30:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/obfs4/</guid>
      <description>Obfs4是GOST支持的一种传输类型(Transport)。 首先要运行服务端，生成客户端访问的URL： gost -L ss+obfs4://:18080 当正常启动后，会在控制台显示U</description>
    </item>
    
    <item>
      <title>透明代理</title>
      <link>https://docs.ginuerzh.xyz/gost/redirect/</link>
      <pubDate>Fri, 17 Nov 2017 15:40:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/redirect/</guid>
      <description>GOST在2.3版本中增加了对TCP透明代理的支持。 gost -L redirect://:12345 -F 192.168.1.1:1080 再配合iptables可以实现全局代理。 iptables -t nat -A OUTPUT -p tcp --match multiport ! --dports 12345,1080 -j DNAT --to-destination 127.0.0.1:12345 注意 透</description>
    </item>
    
    <item>
      <title>端口转发</title>
      <link>https://docs.ginuerzh.xyz/gost/port-forwarding/</link>
      <pubDate>Thu, 16 Nov 2017 20:26:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/port-forwarding/</guid>
      <description>GOST从2.1版本开始增加了对端口转发的支持。 节点配置 端口转发服务节点的配置与普通的代理节点有所不同: scheme://[bind_address]:port/[host]:hostport[,[host]:hostport]?ip=[host]:hostport][,[host]:hostport]] scheme - 端口转发模式, 本地端口转发: tcp,</description>
    </item>
    
    <item>
      <title>权限控制</title>
      <link>https://docs.ginuerzh.xyz/gost/permission/</link>
      <pubDate>Thu, 16 Nov 2017 20:26:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/permission/</guid>
      <description>服务端可以通过白名单whitelist参数和黑名单blacklist参数来控制客户端的请求是否允许被处理。 参数格式为: [actions]:[hosts]:[ports] [actions]是</description>
    </item>
    
    <item>
      <title>负载均衡</title>
      <link>https://docs.ginuerzh.xyz/gost/load-balancing/</link>
      <pubDate>Fri, 17 Nov 2017 15:50:24 +0800</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/load-balancing/</guid>
      <description>节点组 一个节点组由一个或多个节点组成，每个节点可以是任意类型。 GOST代理链的每一层级都是一个节点组。 GOST在2.5版本中增加了对负载均衡</description>
    </item>
    
    <item>
      <title>路由控制</title>
      <link>https://docs.ginuerzh.xyz/gost/bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/bypass/</guid>
      <description>GOST在2.6版本中增加了路由控制功能，可以通过黑白名单来控制客户端的请求。路由控制可以应用于服务节点(-L参数)和代理链的所有层级节点(</description>
    </item>
    
    <item>
      <title>DNS控制</title>
      <link>https://docs.ginuerzh.xyz/gost/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.ginuerzh.xyz/gost/dns/</guid>
      <description>GOST在2.6版本中增加了自定义DNS服务功能，DNS控制可以应用于服务节点。每当此节点收到请求时，会使用此节点上指定的DNS服务对此请求</description>
    </item>
    
  </channel>
</rss>